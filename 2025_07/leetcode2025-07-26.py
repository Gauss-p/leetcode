from typing import List

class Solution:
    def maxSubarrays(self, n: int, conflictingPairs: List[List[int]]) -> int:
        # 为了求解这个问题，我们可以先这样想，假如我们先将所有的冲突对都考虑上，然后将此时的合法子数组的总数量求出来，接下来遍历每一个冲突对，求出去掉这个冲突对，合法子数组能够多出的个数，对于每一个冲突对都进行这样的计算，将多出的个数加入刚才计算出来的合法子数组总个数，就可以得出删除该冲突对可以得到的合法子数组数量，求所有的最大值即可
        # 因此我们先来解决如何求考虑上所有的冲突对时应如何计算。这里我们可以这样想：在这些冲突对中间，每一个冲突对的左端点都有可能对应多个右端点，假如我们现在要求的是以一个冲突对左端点为开头的合法子数组数量，那么为了让这个数量最大，还要保证它合法，那么子数组的右端点最多也只能取到：以该位置为左端点的冲突对中，右端点的最小值，因为如果都到这个地步了子数组还要往右延展，一定就会包含了一组冲突对，也就不合法了，因此假如我们记录了每一个左端点a对应的所有冲突对右端点都存储在g[a]中，那么以a为左端点的合法子数组的右端点最大就是min(g[a])，也就是说，子数组的个数最多就是min(g[a])-a
        # 但是这只计算了以冲突对左端点为开头的子数组个数，还需要计算以一般点为开头的子数组个数，这时也只需找到当前位置右侧最近的一个冲突对左端点，取出该左端点对应的最小右端点，这个点即为以当前位置开始的子数组的最大右端点。注意到每一个点的计算都和右侧的冲突对有关，因此我们从后往前遍历即可。遍历一次即可得出考虑所有冲突对时合法子数组的总数
        # 接下来我们需要计算删除一个冲突对时能够增加的合法子数组个数。注意到上面所有子数组右端点的最大值都是用最小的冲突对右端点，因此如果删除了一个冲突对，那么多出的子数组其实都在该冲突对的右端点和次小右端点中，假设我们已经求出当前右端点和次小右端点，两值都存储在长度为2的列表b中，其中b[0]为当前右端点，b[1]为次小右端点，因此我们需要计算出有多少个以当前冲突对右端点为极限的子数组的开头，然后对于每一个开头都会新增(b[1]-b[0])个右端点，我们如果用一个数组extra，其中extra[b[0]]用来存储删除b[0]这个右端点后会新增合法子数组的个数，那么在我们的循环中，每遇到一个以b[0]为子数组极限的开头位置就将extra[b[0]]累加上(b[1]-b[0])，表示又发现可以新增(b[1]-b[0])个合法子数组了
        # 同时我们需要维护b中两个元素，因此我们只需在每一次循环中，将以当前点为左端点对应的冲突对右端点全部取出，和b中的两个元素放在一起排序，排序后取前两个数字即可
        # 以上的所有操作都可以在一个循环中完成，注意extra中值的计算可以和·确定以当前位置为开头的合法子数组最大的右端点·同时进行，毕竟一个右端点被选做为一个子数组的极限，就相当于之后删除该右端点时可以增加的合法子数组多了一些
        g = [[] for _ in range(n+1)]
        for a, b in conflictingPairs:
            if a>b: # 保证冲突对中两个值可以分为左端点和右端点
                a, b = b, a
            g[a].append(b) # 记录每一个冲突对左端点对应的所有右端点
        
        res = 0 # 记录考虑所有限制后的合法子数组总个数
        extra = [0]*(n+2) # 用来记录删除各个右端点后可能增加的合法子数组个数
        b = [n+1, n+1] # 存储当前的右端点和次小右端点，用来计算删除b[0]后可能增加的合法子数组个数
        for i in range(n, 0, -1):
            b = sorted(b+g[i])[:2] # 取前两个即可
            res += (b[0]-i)
            extra[b[0]] += (b[1]-b[0]) # 累加答案

        return res+max(extra) # 题目要求最大合法子数组个数，取最大值即可

if __name__ == "__main__":
    s = Solution()
    n = 4
    conflictingPairs = [[2,3],[1,4]]
    print(s.maxSubarrays(n, conflictingPairs))
