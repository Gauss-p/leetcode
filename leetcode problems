#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Solution2411 {
public:
    vector<int> smallestSubarrays(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n);
        vector<pair<int, int>> v;
        for (int i=n-1; i>=0; i--){
            v.emplace_back(0, i);
            for (int j=0; j<v.size(); j++){
                v[j].first |= nums[i];
            }
            int k=0;
            for (int j=1; j<v.size(); j++){
                if (v[j].first != v[k].first){
                    v[++k] = v[j];
                }
                else{
                    v[k].second = v[j].second;
                }
            }
            v.resize(k+1);
            res[i] = v[0].second-i+1;
        }
        return res;
    }
};

class Solution26 {
public:
    int removeDuplicates(vector<int>& nums) {
        int n = nums.size();
        int j = 0;
        for (int i=0; i<n; i++){
            if (nums[i] != nums[j]){
                nums[j+1] = nums[i];
                j++;
            }
        }
        return j+1;
    }
};

int main(){
    Solution2411 s2411;
    vector<int> nums = {1,0,2,1,3};
    cout << s2411.smallestSubarrays(nums) << endl;
    
    Solution26 s26;
    nums = {1,1,2};
    cout << s26.removeDuplicates(nums) << endl;
}
